# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vyaownGmXBLRzI1RPlodpiSuXx_hhaCU

#**Spotify chat bot**
"""

import pandas as pd
import numpy as np

df = pd.read_csv("/content/drive/MyDrive/dataset/spotify.csv")

df.head()

df.tail()

df.info()

df.describe()

df.shape

df[df.duplicated()].sum()

df.isna().sum()

df.dropna(inplace= True)

df.columns

df.drop(columns =['Unnamed: 0','track_id','album_name','explicit','danceability','energy', 'key','loudness', 'mode', 'speechiness', 'acousticness',
       'instrumentalness', 'liveness', 'valence', 'tempo', 'time_signature'],inplace =True)

df.head()

df[df['track_genre'] == 'pop' ].value_counts()

df['duration_ms'] = round(df['duration_ms']/(1000*60),2)

df= df.rename(columns = {'artists': 'artist','track_name':'track','duration_ms':'duration','track_genre':'genre'})
df

"""**chatbot initialisation**"""

import nltk
from nltk.chat.util import Chat,reflections

# Load your music data
data = df.copy()

# Define patterns and responses
pairs = [
    (r"genre (.*)", "Here are some songs from the genre '%1':"),
    (r"artist (.*)", "Here are all songs by the artist '%1':"),
    (r"music (.*)", "The song '%1' is by '%2' and belongs to the genre '%3'."),
    (r"similar (.*)", "Here are some songs similar to '%1':"),
    (r"quit", "Goodbye! Enjoy your music!")
]
def get_music_by_artist(artist):
    return data[data['artist'].str.lower() == artist.lower()]

def get_music_by_genre(genre):
    """Returns a DataFrame of songs from the specified genre."""
    return data[data['genre'].str.lower() == genre.lower()]

def get_music_by_name(name):
    """Returns a DataFrame of music data for the given song name."""
    song_info = data[data['track'].str.lower() == name.lower()]
    return song_info

def get_similar_music(name):
    """Returns top 10 songs similar to the given song based on genre, sorted by popularity."""
    song_info = get_music_by_name(name)
    if not song_info.empty:
        # Extract the genre from the first row
        similar_genre = song_info.iloc[0]['genre']
        similar_songs = get_music_by_genre(similar_genre)

        # Sort by popularity and select the top 10
        top_songs = similar_songs.sort_values(by='popularity', ascending=False).head(10)
        return top_songs
    return None

def respond_to_query(query):
    if query.startswith('genre'):
        genre = query.split(' ', 1)[1]
        return get_music_by_genre(genre).to_string(index=False)
    elif query.startswith('artist'):
        artist = query.split(' ', 1)[1]
        return get_music_by_artist(artist).to_string(index=False)
    elif query.startswith('music'):
        music_name = query.split(' ', 1)[1]
        info = get_music_by_name(music_name)
        if info is not None:
            return f"The song '{info['music_name']}' is by '{info['artist']}' and belongs to the genre '{info['genre']}'."
        return "Music not found."
    elif query.startswith('similar'):
        music_name = query.split(' ', 1)[1]
        similar_songs = get_similar_music(music_name)
        if similar_songs is not None:
            return similar_songs.to_string(index=False)
        return "No similar music found."
    else:
        return "Sorry, I didn't understand that."

# Test the chatbot
while True:
    user_input = input("You: ")
    if user_input.lower() == "quit":
        print("Bot: Goodbye! Enjoy your music!")
        break
    response = respond_to_query(user_input)
    print(f"Bot: {response}")

df.to_csv('music.csv')











